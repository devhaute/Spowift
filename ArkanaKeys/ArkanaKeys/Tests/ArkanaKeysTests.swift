// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x46, 0x83, 0x2d, 0x19, 0x3d, 0x2d, 0x38, 0x6c, 0x5a, 0x56, 0x73, 0x6f, 0x8d, 0xf7, 0x86, 0xd, 0x47, 0xe3, 0x1f, 0x70, 0x9b, 0x41, 0xd0, 0x62, 0x86, 0x4f, 0x54, 0x43, 0xe0, 0xce, 0xbe, 0x32, 0x25, 0x61, 0xf4, 0xb7, 0x69, 0x1f, 0x1b, 0xb5, 0x89, 0x3b, 0x9c, 0x97, 0x9a, 0x7e, 0xba, 0x66, 0x9c, 0xe3, 0xb3, 0xf2, 0x9b, 0x1b, 0xcc, 0x3e, 0x59, 0x40, 0x65, 0xad, 0xa4, 0x6a, 0x7b, 0x8a
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x22, 0xb5, 0x1d, 0x7a, 0xa, 0x4b, 0x1, 0x9, 0x39, 0x35, 0x4a, 0x5b, 0xbc, 0xc6, 0xbf, 0x3e, 0x7f, 0xd1, 0x26, 0x40, 0xfd, 0x23, 0xb1, 0x51, 0xe0, 0x7c, 0x31, 0x75, 0xd0, 0xad, 0xd8, 0xa, 0x46, 0x59, 0xc2, 0xd3, 0x5c, 0x7b, 0x2e, 0x87, 0xea, 0x58, 0xaf, 0xf5, 0xa3, 0x1b, 0xdb, 0x57, 0xad, 0x81, 0xd6, 0xc6, 0xfa, 0x7a, 0xfc, 0xd, 0x3c, 0x70, 0x7, 0xcb, 0xc7, 0xf, 0x4f, 0xbc, 0x24, 0xb5, 0x19, 0x2b, 0x5b, 0x4f, 0x8, 0x59, 0x6c, 0x66, 0x11, 0x59, 0xeb, 0xc3, 0xbf, 0x3b, 0x72, 0x86, 0x2c, 0x45, 0xf8, 0x77, 0xe5, 0x6, 0xe0, 0x2b, 0x6d, 0x71, 0xd3, 0xfb, 0xdd, 0xa, 0x16, 0, 0x90, 0xd6, 0xb, 0x7e, 0x2f, 0x8d, 0xbe, 0x58, 0xf8, 0xf3, 0xf8, 0x4d, 0x8c, 0, 0xf8, 0xdb, 0xd2, 0xc2, 0xff, 0x29, 0xae, 0x6, 0x6a, 0x78, 0x51, 0x9e, 0x91, 0x5c, 0x1d, 0xb8
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "d60c7f9ecc9411938290fba3f3e60cf8c86d5d52cc3b9ea11be4aa03e0bfce46b642fb0560b6f4965e35c65dfd9235c83adaba487cddb36fd8a0d2b8384356f2")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x28, 0xf0, 0x4a, 0x40, 0xb, 0x4a, 0x74, 0x25, 0x12, 0x10, 0x34, 0x44, 0xfd, 0xa3, 0xc1, 0x63, 0x2e, 0x87, 0x7d, 0x27, 0xd8, 0x9, 0xb9, 0x3a, 0xb5, 0x77, 0x23, 0xc, 0x94, 0x85, 0xf3, 0x5d, 0x50, 0x4a, 0x90, 0xd9, 0x21, 0x71, 0x61, 0xcd, 0xe1, 0x53, 0xaf, 0xae, 0xad, 0x9, 0x95, 0x2e, 0xcc, 0xa2, 0xc7, 0x93, 0xec, 0x6b, 0xa4, 0x6, 0x69, 0x21, 0x2e, 0xec, 0xf0, 0x8, 0x3a, 0xce, 0x7, 0xda, 0x7e, 0x52, 0x6b, 0x1c, 0x50, 0x5b, 0x39, 0xe, 0xa, 0x26, 0xd8, 0x99, 0xed, 0x66, 0x3f, 0xa0, 0x57, 0x38, 0xab, 0x10, 0xed, 0x5f
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "nsgY6gLIHFG+pTGnidbWCHiX38wOtKMou+dnHnzxhh397w/HPAtawph80aKATbADAYSKV1h7cXyIUnkkxCHH0Q==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x72, 0xe2, 0x4c, 0x21, 0xc, 0x1f, 0xc, 0x55, 0x77, 0x34, 0x46, 0xb, 0xef, 0xda, 0xb2, 0x6f, 0x25, 0x85, 0x32, 0x11, 0xaf, 0x75, 0xe3, 0x4f, 0xb2, 0x2e, 0x6d, 0x70, 0x86, 0xab, 0x89, 0x2, 0x15, 0x54, 0xc1, 0xd3
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "4aa81249-b5db-4bbf-a443-4a93fe70055d")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x32, 0xf1, 0x58, 0x7c
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x20, 0xe2, 0x41, 0x6a, 0x58
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x72, 0xb1
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x34, 0xe6, 0x4c, 0x75, 0x62, 0x9, 0x54, 0x5, 0x37, 0x9, 0, 0x7, 0xec, 0x93, 0xff
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andEscaped_andNoQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignEscapedAndAndNoQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andEscaped_andDoubleQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignEscapedAndDoubleQuoteKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andSingleQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignNotEscapedAndSingleQuoteKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andDoubleQuotes_shouldDecodeWithUnexpectedValue() {
        XCTAssertNotEqual(globalSecrets.secretWithDollarSignNotEscapedAndDoubleQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andNoQuotes_shouldDecodeWithUnexpectedValue() {
        XCTAssertNotEqual(globalSecrets.secretWithDollarSignNotEscapedAndNoQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withWeirdCharacters_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithWeirdCharactersKey, "` ~ ! @ # % ^ & * ( ) _ - + = { [ } } | : ; ' < , > . ? /")
    }
}
