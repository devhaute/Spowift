// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x37, 0x43, 0xd5, 0xe2, 0x78, 0x49, 0xe3, 0xe8, 0x51, 0xe3, 0xf4, 0x46, 0x54, 0x24, 0xf7, 0xf6, 0x72, 0xb0, 0x9f, 0xc1, 0x53, 0x3, 0x26, 0xb9, 0x72, 0x6e, 0x2c, 0xd, 0xe3, 0xce, 0x26, 0xe, 0x51, 0x8f, 0x63, 0xd3, 0x1c, 0xbc, 0x8b, 0xd5, 0x26, 0xc3, 0x86, 0xbd, 0x45, 0x57, 0x89, 0x4a, 0xe, 0x49, 0xda, 0xe7, 0x12, 0xc9, 0, 0x84, 0x60, 0xae, 0x35, 0x86, 0x4d, 0x17, 0xef, 0xe8
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}

        @inline(__always)
        public let spotifyClientID: String = {
            let encoded: [UInt8] = [
                0x5, 0x27, 0xb6, 0x86, 0x40, 0x7a, 0xd1, 0xdb, 0x67, 0xd0, 0x95, 0x22, 0x60, 0x13, 0xc5, 0xc6, 0x10, 0x83, 0xfd, 0xf2, 0x61, 0x61, 0x16, 0x8e, 0x13, 0x8, 0x48, 0x6c, 0xd1, 0xa8, 0x12, 0x3b
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let spotifyClientSecret: String = {
            let encoded: [UInt8] = [
                0x7, 0x76, 0xe1, 0xd3, 0x4b, 0x7f, 0x81, 0xdc, 0x30, 0x86, 0xc3, 0x7f, 0x60, 0x10, 0xc5, 0xc4, 0x13, 0x86, 0xa6, 0xa2, 0x67, 0x62, 0x1e, 0xd8, 0x43, 0x5f, 0x18, 0x6f, 0xd1, 0xaf, 0x14, 0x37
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}
public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}

        @inline(__always)
        public let spotifyClientID: String = {
            let encoded: [UInt8] = [
                
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let spotifyClientSecret: String = {
            let encoded: [UInt8] = [
                
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}
