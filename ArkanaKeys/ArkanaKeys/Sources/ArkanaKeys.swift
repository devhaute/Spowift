// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x46, 0x83, 0x2d, 0x19, 0x3d, 0x2d, 0x38, 0x6c, 0x5a, 0x56, 0x73, 0x6f, 0x8d, 0xf7, 0x86, 0xd, 0x47, 0xe3, 0x1f, 0x70, 0x9b, 0x41, 0xd0, 0x62, 0x86, 0x4f, 0x54, 0x43, 0xe0, 0xce, 0xbe, 0x32, 0x25, 0x61, 0xf4, 0xb7, 0x69, 0x1f, 0x1b, 0xb5, 0x89, 0x3b, 0x9c, 0x97, 0x9a, 0x7e, 0xba, 0x66, 0x9c, 0xe3, 0xb3, 0xf2, 0x9b, 0x1b, 0xcc, 0x3e, 0x59, 0x40, 0x65, 0xad, 0xa4, 0x6a, 0x7b, 0x8a
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let spotifyClientID: String = {
            let encoded: [UInt8] = [
                0x74, 0xe7, 0x4e, 0x7d, 0x5, 0x1e, 0xa, 0x5f, 0x6c, 0x65, 0x12, 0xb, 0xb9, 0xc0, 0xb4, 0x3d, 0x25, 0xd0, 0x7d, 0x43, 0xa9, 0x23, 0xe0, 0x55, 0xe7, 0x29, 0x30, 0x22, 0xd2, 0xa8, 0x8a, 0x7
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let spotifyClientSecret: String = {
            let encoded: [UInt8] = [
                0x76, 0xb6, 0x19, 0x28, 0xe, 0x1b, 0x5a, 0x58, 0x3b, 0x33, 0x44, 0x56, 0xb9, 0xc3, 0xb4, 0x3f, 0x26, 0xd5, 0x26, 0x13, 0xaf, 0x20, 0xe8, 0x3, 0xb7, 0x7e, 0x60, 0x21, 0xd2, 0xaf, 0x8c, 0xb
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}
    }
}
public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}
    }
}
